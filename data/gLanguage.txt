S' program stmtlist stmt decl identifierlist type primarytypes arraytype stringtype cmpstmt simplestmt assignment expression operation term constant iostmt inputstmt outputstmt termlist flowstmt structstmt ifstmt elseword condition negationword whilestmt forstmt symbol
ε IDENTIFIER CONSTANT identifier letter non_zero_digit digit integer integer_const string_const quotes special_symbol real_const binary_const relation [ ] { } ( ) ; : , < <= > >= == != ! && || ^ += -= *= /= = + - * % / începe_program continuă oprește citește afișează dacă sau_dacă altfel pentru cât_timp întreg binar real caractere șir adevărat fals și sau negat
S'
S' -> program
program -> începe_program { stmtlist }
stmtlist -> stmt | stmtlist stmt
stmt -> simplestmt | structstmt
decl -> type identifierlist
identifierlist -> IDENTIFIER
type -> primarytypes | stringtype | arraytype
primarytypes -> întreg | real | binar
arraytype -> șir [ CONSTANT ] primarytypes
stringtype -> caractere
cmpstmt -> { stmtlist }
simplestmt -> decl ; | assignment ; | iostmt ; | flowstmt ;
assignment -> IDENTIFIER symbol expression
symbol -> = | += | -= | *= | /=
expression -> term
operation -> + | - | * | / | % | ^
term -> IDENTIFIER | CONSTANT | adevărat | fals
iostmt -> inputstmt | outputstmt
inputstmt -> citește ( IDENTIFIER )
outputstmt -> afișează ( termlist )
termlist -> term | termlist , term
flowstmt -> continuă | oprește
structstmt -> ifstmt | whilestmt | forstmt | cmpstmt
ifstmt -> dacă ( term ) stmt elseword stmt
elseword -> sau_dacă | altfel
condition -> expression relation expression | negationword expression relation expression
relation -> < | > | <= | >= | == | !=
negationword -> ! | negat
whilestmt -> cât_timp ( term ) cmpstmt
forstmt -> pentru ( assignment ; condition ; assignment ) cmpstmt